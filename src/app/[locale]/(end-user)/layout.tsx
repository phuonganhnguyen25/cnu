import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "@/app/globals.css";
import Link from "next/link";
import { EndUserHeaderCategoryList } from "@/actions/category";
import { getPathnames } from "@/actions/getPathnames";
import { getLanguages } from "@/actions/getLanguages";
import { transformStr } from "@/helpers/normalize-str";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const locales = ["en", "vi"];

export function generateStaticParams() {
  return locales.map((locale) => ({ locale }));
}

export default async function RootLayout({
  children,
  params: { locale },
}: Readonly<{
  children: React.ReactNode;
  params: { locale: string };
}>) {
  const categories = await EndUserHeaderCategoryList();
  const pathnames = await getPathnames();
  const { lang } = await getLanguages();

  return (
    <html lang={locale}>
      <body className={inter.className}>
        <header className="bg-white shadow z-20 sticky top-0">
          <section className="py-4 md:pt-6 px-8 md:px-32 lg:px-32">
            <h1 className="text-2xl font-bold text-gray-800">Sticky Header</h1>
          </section>
          <nav
            className="relative w-full"
            style={{ backgroundColor: "#f7f7f7" }}
          >
            <section className="flex flex-wrap justify-start items-start gap-1 md:gap-2 lg:gap-3 px-8 md:px-32">
              {[
                {
                  id: 0,
                  name: {
                    name_en: lang["Common_Text"]["Home"],
                    name_vi: lang["Common_Text"]["Home"],
                  },
                  children: [],
                },
                ...categories,
              ].map((x) => {
                const name = x.name[(`name_` + locale) as keyof typeof x.name];
                const lv1Href = pathnames.HOME_CAT_SUB(transformStr(name), "");

                return (
                  <ul className={`relative group`} key={x.id}>
                    <li
                      className={`pr-6 py-2 text-gray-600 hover:text-red-700 hover:bg-gray-100 transition duration-300 ease-in-out font-semibold uppercase text-xs`}
                    >
                      <Link href={lv1Href}>{name}</Link>
                    </li>
                    {x.children?.length ? (
                      <ul
                        className={`absolute hidden bg-white shadow-md py-2 w-48 border border-gray-200 rounded-lg z-10 group-hover:block text-xs font-light`}
                      >
                        {x.children.map((y) => {
                          const nameSub =
                            y.name[(`name_` + locale) as keyof typeof y.name];
                          const lv2Href = pathnames.HOME_CAT_SUB(
                            transformStr(name),
                            transformStr(nameSub)
                          );
                          return (
                            <li
                              key={y.id}
                              className="block px-4 py-2 hover:bg-gray-200 hover:text-red-900 transition duration-300 ease-in-out opacity-80"
                            >
                              <Link href={lv2Href}>{nameSub}</Link>
                            </li>
                          );
                        })}
                      </ul>
                    ) : null}
                  </ul>
                );
              })}
            </section>
          </nav>
        </header>
        {children}
      </body>
    </html>
  );
}
